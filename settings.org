#+TITLE: Chris's Emacs settings file
#+AUTHOR: Chris Bilson
#+EMAIL: cbilson@pobox.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-dark.min.css" />
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+TAGS: export(e) noexport(n)
#+STARTUP: align fold nodlcheck lognotestate content

* Introduction

This is mostly copied from here: [[http://writequit.org/org/settings.html]]

This file is used by org-mode to load my personal emacs configuration file. The
latest version of this file is always at
[[[[https://github.com/cbilson/.emacs]]]]. Keep in mind that to use it you
will probably have to install a number of packages. Here's my list of packages:
[[[[https://github.com/cbilson/.emacs/blob/master/packages.el]]]].

This file was last exported: {{{time(%Y-%m-%d %H:%M)}}}

It can be loaded by putting the following in your .emacs.d/init.el:

#+begin_src emacs-lisp :tangle nil
  ;; Use this is your .emacs, in your home or start emacs with the below as the
  ;; startup file.

  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  (require 'cl)
  (require 'package)

  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")))

  (package-initialize)

  (when (null package-archive-contents)
    (package-refresh-contents))

  ;; figure out where my stuff is
  (defvar cbilson/emacs-dir
    (let* ((candidates
            (mapcar #'substitute-in-file-name
                    '("$HOME\\OneDrive\\Emacs"
                      "$HOME\\SkyDrive\\Emacs"
                      "$HOME\\..\\..\\OneDrive\\Emacs"
                      "$HOME\\..\\..\\SkyDrive\\Emacs"
                      "$HOME\\emacs"
                      "$HOME\\.emacs.d"))))
      (file-name-as-directory
       (find-if #'file-exists-p candidates))))

  (defvar cbilson/org-dir
    (file-name-as-directory (substitute-in-file-name "$HOME\\Documents\\org")))

  (defvar cbilson/lisp-dir
    (when cbilson/emacs-dir
      (file-name-as-directory (concat cbilson/emacs-dir "site-lisp"))))

  (when cbilson/lisp-dir
    (add-to-list 'load-path cbilson/lisp-dir))

  (require 'org)
  (org-babel-load-file
   (expand-file-name "settings.org"
                     cbilson/emacs-dir))

  ;; Message how long it took to load everything (minus packages)
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading settings...done (%.3fs)" elapsed))

#+end_src

* Prelude
** vars

   #+begin_src emacs-lisp
     (defvar cbilson/backups-dir (concat user-emacs-directory "backups"))
     (defvar cbilson/java-home (substitute-in-file-name "$JavaHome"))
     (defvar cbilson/java-cmd "java")

     (defvar cbilson/omnisharp-path
       (file-name-as-directory
        (concat cbilson/emacs-dir "OmnisharpServer")))

     (defvar cbilson/high-dpi
       (pcase system-name
         ("CBILSON-LAPTOP" t)
         ("MAKO" t)
         (_ nil)))

   #+end_src

** Utility Functions

#+begin_src emacs-lisp
  (defun cbilson/reset-erc-track-mode ()
    (interactive)
    (setq erc-modified-channels-alist nil)
    (erc-modified-channels-update)
    (erc-modified-channels-display))

  (defun cbilson/cleanup-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (untabify (point-min) (point-max))
    (indent-region (point-min) (point-max)))

  (defun cbilson/clojure-mode-eldoc-hook ()
    (add-hook 'clojure-mode-hook 'turn-on-eldoc-mode))

  (defun cbilson/kill-word-key ()
    (local-set-key (kbd "C-M-h") 'backward-kill-word))

  (defun cbilson/install-packages (packages)
    (dolist (p packages)
      (when (not (package-installed-p p))
        (unwind-protect
            (condition-case ex
                (package-install p)
              ('error
               (message (format "Failed to install package %s: %s"
                                p
                                ex))))))))

  ;; Duplicate start of line or region,
  ;; from http://www.emacswiki.org/emacs/DuplicateStartOfLineOrRegion
  (defun cbilson/duplicate-start-of-line ()
    (if (bolp)
        (progn
          (end-of-line)
          (duplicate-start-of-line)
          (beginning-of-line))
      (let ((text (buffer-substring (point)
                                    (beginning-of-thing 'line))))
        (forward-line)
        (push-mark)
        (insert text)
        (open-line 1))))

  (defun cbilson/duplicate-region ()
    (let* ((end (region-end))
           (text (buffer-substring (region-beginning) end)))
      (goto-char end)
      (insert text)
      (push-mark end)
      (setq deactivate-mark nil)
      (exchange-point-and-mark)))

  (defun cbilson/duplicate-start-of-line-or-region ()
    (interactive)
    (if mark-active
        (cbilson/duplicate-region)
      (cbilson/duplicate-start-of-line)))

  (defun cbilson/recentf-ido-find-file ()
    "Find a recent file using ido."
    (interactive)
    (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
      (when file
        (find-file file))))

  (defun cbilson/rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (defun cbilson/compilation-mode-hook ()
    )

  (defun cbilson/join-line-back ()
    (interactive)
    (join-line -1))

  (defun cbilson/next-line-more ()
    (interactive)
    (ignore-errors (next-line 5)))

  (defun cbilson/previous-line-more ()
    (interactive)
    (ignore-errors (previous-line 5)))

#+end_src

* Packages

#+begin_src emacs-lisp
  (setq cbilson/packages
    '(
      ;; Themes
      smyx-theme
      darktooth-theme

      ;; Saw this mentioned here: [1]
      ace-isearch

      ;; other ace modes
      ace-jump-mode ace-jump-buffer ace-window

      ;; LaTeX
      acutex

      ;; Fast grep-replacement
      ag

      ;; org-mode
      org org-magit

      ;; misc minor modes
      browse-kill-ring
      dash dired-details
      dired+
      easy-kill
      editorconfig
      expand-region
      htmlize
      flx
      flx-ido
      helm
      helm-moccur
      idle-highlight-mode
      ido-ubiquitous
      iedit
      kurecolor
      loccur
      multiple-cursors
      page-break-lines
      paren-face
      projectile
      rainbow-mode

      ;; Basic Programming
      emmet-mode
      feature-mode
      find-file-in-project
      flymake

      ;; git
      gist
      gitconfig-mode
      gitignore-mode
      git-timemachine
      magit

      ;; Clojure
      cider
      clojure-mode

      ;; scheme
      geiser

      ;; elisp
      elisp-slime-nav

      ;; Web programming
      coffee-mode

      ;; .NET
      fsharp-mode
      csharp-mode
      omnisharp

      ;; Powershell
      powershell

      ;; misc major modes
      csv-mode
      god-mode
      markdown-mode

      js-comint
      yasnippet

      pp-c-l
      rbenv
      s scpaste slime smartparens smex smooth-scrolling
      tuareg-mode
      twittering-mode
      undo-tree
      wrap-region writegood-mode
      yaml-mode

      ;; Tags
      ctags ctags-update))

  (cbilson/install-packages cbilson/packages)
#+end_src

[1]: [[http://sachachua.com/blog/2015/01/emacs-kaizen-ace-isearch-combines-ace-jump-mode-helm-swoop/][Emacs kaizen: ace-isearch combines ace-jump-mode and helm-swoop]]

* Basic Settings

** Ubiquitous Settings

*** Set my name and e-mail

    #+begin_src emacs-lisp
    (setq user-full-name "Chris Bilson")
    (setq user-mail-address "cbilson@pobox.com")
    #+end_src

*** Cleanup the UI

    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)

      (defalias 'yes-or-no-p 'y-or-n-p)

      (setq inhibit-splash-screen t
            initial-scratch-message nil
            scroll-step 3
            visible-bell t
            use-dialog-box nil)
    #+end_src

*** Use org-mode as initial mode instead of fundamental mode.

    #+begin_src emacs-lisp
      (setq
       ;; I want scratch buffers to be in org-mode
       initial-scratch-message nil
       initial-major-mode 'org-mode)


    #+end_src

*** Backups
    I like having backups, just not in the directory I am working in.

    #+begin_src emacs-lisp
      (setq backup-by-copying t
            backup-directory-alist
            `((".*" . ,(file-name-as-directory cbilson/backups-dir)))
            auto-save-file-name-transform 
            `((".*" ,(file-name-as-directory cbilson/backups-dir) t))
            create-lock-files nil
            delete-old-versions t
            kept-new-versions 6
            kept-old-versions 2
            make-backup-files t)
    #+end_src

*** Whitespace
   
    - No tabs, 2-spaces, by default. Show column numbers.

      #+begin_src emacs-lisp
      (setq c-basic-offset 2
            column-number-mode t
            indent-tabs-mode nil
            tab-width 2)
      #+end_src

    - Indicate empty lines, kind of like how vim does, with a symbol
      on the left fringe.

      #+begin_src emacs-lisp
      (setq indicate-empty-lines t)
      #+end_src

    - Make sure files have final newline characters when saved.
  
      #+begin_src emacs-lisp
      (setq require-final-newline t)
      #+end_src

*** Apropos
    Make apropos commands search more extensively.

    #+begin_src emacs-lisp
    (setq apropos-do-all t)
    #+end_src

*** Echoing Commands
   
    Echo unfinished commands after 0.1 seconds of pause.

    #+begin_src emacs-lisp
    (setq echo-keystrokes 0.1)
    #+end_src

*** Inter-program paste

    Save clipboard strings into kill ring before replacing them.
    When one selects something in another program to paste it into
    Emacs, but kills something in Emacs before actually pasting it,
    this selection is gone unless this variable is non-nil, in which
    case the other program's selection is saved in the `kill-ring'
    before the Emacs kill and one can still paste it using
    <S-insertchar> M-x yank-pop.

    #+begin_src emacs-lisp
      (setq save-interprogram-paste-before-kill t)
    #+end_src

*** Miscellaneous settings
    #+begin_src emacs-lisp

    (setq version-control t
          whitespace-style '(face trailing lines-tail tabs)
          x-select-enable-clipboard t
          x-select-enable-primary t)

    ;; auto-revert
    (global-auto-revert-mode +1)
    (setq global-auto-revert-non-file-buffers +1
          auto-revert-verbose nil)

    (setq-default ispell-program-name "aspell" )

    (semantic-mode 1)
    #+end_src

** Auto Modes

.NET in particular has a lot of file extensions that are basically XML files.

#+begin_src emacs-lisp
  ;; (autoload 'powershell-mode "powershell-mode")

  (setq auto-mode-alist
        (append auto-mode-alist
                '(("\\.asm$" . nasm-mode)
                  ("\\.aspx$" . html-mode)
                  ("\\.bat$" . cmd-mode)
                  ("\\.cljs$" . clojurescript-mode)
                  ("\\.cmd$" . cmd-mode)
                  ("\\.config$" . xml-mode)
                  ("\\.cs$" . csharp-mode)
                  ("\\.csx$" . csharp-mode)
                  ("\\.cshtml$" . html-mode)
                  ("\\.csman$" . xml-mode)
                  ("\\.csproj$" . xml-mode)
                  ("\\.fs$" . fsharp-mode)
                  ("\\.fsx$" . fsharp-mode)
                  ("\\.fsproj$" . xml-mode)
                  ("\\.targets$" . xml-mode)
                  ("\\.ps1xml$" . xml-mode)
                  ("\\.psd1" . powershell-mode)
                  ("\\.props$" . xml-mode)
                  ("\\.proj$" . xml-mode)
                  ("\\.rd$" . xml-mode)
                  ("\\.rdsc$" . xml-mode)
                  ("\\.rels$" . xml-mode)
                  ("\\.t4$" . xml-mode)
                  ("\\.m$" . octave-mode)
                  ("\\.ps1$" . powershell-mode)
                  ("\\.psm1$" . powershell-mode)
                  ("\\.R$" . r-mode)
                  ("\\.r$" . r-mode)
                  ("\\.spark$" . html-mode))))

#+end_src

** GUI Specific settings

   When there is a window-system set:
   - Use the buffer file name for the window title.
   - Make mouse yank commands yank at point, not where the click
     happened.
   - Try to whatever my current favorite GUI theme is.

   #+begin_src emacs-lisp
     (when window-system
       (setq frame-title-format '(buffer-file-name "%f" ("%b"))
             mouse-yank-at-point t
             ;; mouse-wheel-scroll-amount '(1 ((shift) . 1))
             ;; mouse-wheel-progressive-speed nil
             ;; mouse-wheel-follow-mouse t
             )

       (when (package-installed-p 'darktooth-theme)
         (load-theme 'darktooth t))

       ;; Fonts
       ;;(set-face-attribute 'default nil ...)

       (set-face-attribute 'minibuffer-prompt nil :slant 'oblique)
       (set-face-attribute 'mode-line nil
                           :foreground "cornsilk"
                           :background "grey30"
                           :slant 'normal
                           :weight 'bold))
   #+end_src

** Windows Stuff

   On my high-DPI laptop, I had to:
   - Change emacs 24.4 to legacy mode, as described in [[http://stackoverflow.com/questions/24645684/emacs-on-windows-8-1-with-font-scaling-for-4k-monitor][this SO post]].
   - Bump up the font size

   But now it looks great.
   
   #+begin_src emacs-lisp
     (when (eq window-system 'w32)

       (defvar cbilson/base-font-height
         (if cbilson/high-dpi 100 120))

       ;; Fonts
       (set-face-attribute 'default nil
                           :font "Consolas"
                           :height cbilson/base-font-height)

       (set-face-attribute 'minibuffer-prompt nil
                           :font "Candara"
                           :height (+ cbilson/base-font-height 40))

       (set-face-attribute 'mode-line nil
                           :font "Corbel"
                           :height (+ cbilson/base-font-height 20))

       (set-face-attribute 'mode-line-inactive nil
                           :font "Corbel"
                           :height (+ cbilson/base-font-height 20))

       (defvar cbilson/chocolatey-path
         (file-name-as-directory (getenv "ChocolateyInstall"))
         "Path to chocolatey.")

       (defvar cbilson/chocolatey-bin-path
         (file-name-as-directory (concat cbilson/chocolatey-path "bin"))
         "Path to chocolatey bin.")

       (require 'ispell)
       (require 'flyspell)

       (setq aspell-dir (file-name-as-directory (concat cbilson/emacs-dir "aspell")))
       (setq aspell-bin-dir (file-name-as-directory (concat aspell-dir "bin")))
       (setq ispell-program-name (concat aspell-bin-dir "aspell.exe"))

       (setq ispell-aspell-data-dir (file-name-as-directory (concat aspell-dir "data")))
       (setq ispell-aspell-dict-dir (file-name-as-directory (concat aspell-dir "dict")))


       (add-to-list 'ispell-local-dictionary-alist '("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
                                                     ("-B")
                                                     nil iso-8859-1))

       (setq browse-url-browser-function 'browse-url-default-windows-browser
             delete-by-moving-to-trash t
             ispell-personal-dictionary "~/.ispell"
             path-to-ctags "G:\\bin\\ctags.exe"
             projectile-enable-cachinge t
             projectile-indexing-method 'native)

       ;; lisp
       (eval-after-load 'lisp-mode
         '(progn
            (when (file-exists-p "~/quicklisp/slime-helper.el")
              (load "~/quicklisp/slime-helper.el"))
            ;; Replace "sbcl" with the path to your implementation
            (setq inferior-lisp-program
                  "C:\\Program Files\\Steel Bank Common Lisp\\1.2.7\\sbcl.exe")))

       ;; java
       (setq cbilson/java-home
             (let* ((candidates
                     (mapcar #'substitute-in-file-name
                             '("$ProgramW6432\\Zulu\\zulu-8"
                               "$ProgramW6432\\Java\\JRE")))
                    (java-dir (find-if #'file-exists-p candidates)))
               (when java-dir
                 (file-name-as-directory
                  (find-if #'file-exists-p candidates)))))

       (setenv "JAVA_HOME" cbilson/java-home)

       (setq cbilson/java-cmd
             (concat (file-name-as-directory (concat cbilson/java-home "bin")) "java.exe"))

       (setenv "JAVA_CMD" cbilson/java-cmd)

       ;; maximize the window
       (w32-send-sys-command 61488)

       (setq w32-pass-apps-to-system nil)
       (setq w32-apps-modifier 'hyper))
   #+end_src

*** Shell Extension

    Run the following .reg file to get "Edit in Emacs" for files and
    folders in Explorer.

    [[http://stackoverflow.com/questions/455077/how-to-create-a-right-click-context-shell-shortcut-edit-with-emacs][Source]]

    #+BEGIN_QUOTE
    Windows Registry Editor Version 5.00

    [HKEY_CLASSES_ROOT\*\shell]

    [HKEY_CLASSES_ROOT\*\shell\openwemacs]
    @="&Edit with Emacs"

    [HKEY_CLASSES_ROOT\*\shell\openwemacs\command]
    @="C:\\ProgramData\\Chocolatey\\bin\\emacsclient.exe -n \"%1\" --alternate-editor\"notepad\" --quiet"

    [HKEY_CLASSES_ROOT\Directory\shell\openwemacs]
    @="Edit &with Emacs"

    [HKEY_CLASSES_ROOT\Directory\shell\openwemacs\command]
    @="C:\\ProgramData\\Chocolatey\\bin\\emacsclient.exe -n \"%1\" --alternate-editor\"notepad\" --quiet"
    #+END_QUOTE
    
*** Problems

**** server-start complains that the server folder is unsafe

     [[http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start][Emacs - Error when calling (server-start)]]
     
     #+BEGIN_SRC emacs-lisp
       (set-file-modes (expand-file-name "~/.emacs.d/server") #o700)
     #+END_SRC

     #+BEGIN_SRC powershell
       $serverFolder = Join-Path $env:HOME ".emacs.d\server"
       $acl = Get-Acl $serverFolder
       $owner = New-Object System.Security.Principal.NTAccount('cbilson@microsoft.com')
       $acl.SetOwner($owner)
       Set-Acl $serverFolder $acl
     #+END_SRC

* Keyboard Shortcuts
** Reference
   The following are the global keybindings generally active in all
   modes. The elisp to actually do the bindings is spread around, but
   it's nice to have them all in one place too.

| Shortcut         | What it Does                                         |
|------------------+------------------------------------------------------|
| C-_              | undo-tree-undo                                       |
| C-+              | text-scale-increase                                  |
| C--              | text-scale-decrease                                  |
| C-c a            | org-agenda                                           |
| C-c c            | org-capture                                          |
| C-c d            | cbilson/duplicate-start-of-line-or-region            |
| C-c f            | find-file-in-project                                 |
| C-c g            | magit-status                                         |
| C-c h ...        | helm prefix                                          |
| C-c l            | org-store-link                                       |
| C-c m ...        | mc/ prefix                                           |
| C-c n            | cbilson/cleanup-buffer                               |
| C-c o ...        | prefix for Omnisharp keybindings                     |
| C-c o f          | omnisharp-mode                                       |
| C-c o j          | omnisharp-start-omnisharp-server (Omnisharp jack-in) |
| C-c p ...        | projectile prefix                                    |
| C-c q            | join-line                                            |
| C-c r            | org-refile                                           |
| C-c t            | eshell                                               |
| C-c v            | eval-buffer                                          |
| C-c y            | bury-buffer                                          |
| C-c ;            | iedit-mode                                           |
| C-c C-j          | cider-jack-in                                        |
| C-c C-k          | projectile-compile-project, compile                  |
| C-c C-r          | revert-buffer                                        |
| C-c C-v t        | org-babel-tangle                                     |
| C-c C-;          | iedit-mode-from-isearch                              |
| C-o              | loccur-current                                       |
| C-x m            | eshell                                               |
| C-x o            | other-window                                         |
| C-x u            | undo-tree-visualize                                  |
| C-x C-i          | imenu                                                |
| C-x C-j          | dired-jump                                           |
| C-x C-m          | shell                                                |
| C-x C-o          | (other-window 2)                                     |
| C-x C-r          | cbilson/recentf-ido-find-file                        |
| C-x M-f          | ido-find-file-other-window                           |
| C-M-a            | sp-backward-down-sexp                                |
| C-M-b            | sp-backward-sexp                                     |
| C-M-d            | sp-down-sexp                                         |
| C-M-f            | sp-forward-sexp                                      |
| C-M-h            | backward-kill-word                                   |
| C-S-a            | sp-beginning-of-sexp                                 |
| C-S-d            | sp-end-of-sexp                                       |
| C-M-e            | sp-up-sexp                                           |
| C-M-u            | sp-backward-up-sexp                                  |
| C-M-t            | sp-transpose-sexp                                    |
| C-M-n            | sp-next-sexp                                         |
| C-M-p            | sp-previous-sexp                                     |
| C-M-k            | sp-kill-sexp                                         |
| C-M-w            | sp-copy-sexp                                         |
| C-<right>        | sp-forward-slurp-sexp                                |
| C-<left>         | sp-forward-barf-sexp                                 |
| C-M-<left>       | sp-backward-slurp-sexp                               |
| C-M-<right>      | sp-backward-barf-sexp                                |
| C-M-<delete>     | sp-splice-sexp-killing-forward                       |
| C-M-<backspace>  | sp-splice-sexp-killing-backward                      |
| C-S-<backspace>  | sp-splice-sexp-killing-around                        |
| C-]              | sp-select-next-thing-exchange                        |
| C-<left_bracket> | sp-select-previous-thing                             |
| C-M-]            | sp-select-next-thing                                 |
| M-_              | undo-tree-redo                                       |
| M-<delete>       | sp-unwrap-sexp                                       |
| M-<backspace>    | sp-backward-unwrap-sexp                              |
| M-g c            | goto-char                                            |
| M-g <TAB>        | move-to-column                                       |
| M-B              | sp-backward-symbol                                   |
| M-D              | sp-splice-sexp                                       |
| M-F              | sp-forward-symbol                                    |
| H-<right>        | enlarge-window-horizontally                          |
| H-<left>         | shrink-window-horizontally                           |
| H-<up>           | enlarge-window                                       |
| H-<down>         | shrink-window                                        |
| H-t              | sp-prefix-tag-object                                 |
| H-p              | sp-prefix-pair-object                                |
| H-s c            | sp-convolute-sexp                                    |
| H-s a            | sp-absorb-sexp                                       |
| H-s e            | sp-emit-sexp                                         |
| H-s p            | sp-add-to-previous-sexp                              |
| H-s n            | sp-add-to-next-sexp                                  |
| H-s j            | sp-join-sexp                                         |
| H-s s            | sp-split-sexp                                        |

** General Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "M-;") 'comment-dwim)
  (global-set-key (kbd "M-j") 'cbilson/join-line-back)
  (global-set-key (kbd "C-S-n") 'cbilson/next-line-more)
  (global-set-key (kbd "C-S-p") 'cbilson/previous-line-more)
  (global-set-key (kbd "C-x m") 'eshell)
  (global-set-key (kbd "C-x C-m") 'shell)
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-i") 'imenu)
  (global-set-key (kbd "C-x C-j") 'dired-jump)
  (global-set-key (kbd "C-x C-r") 'cbilson/recentf-ido-find-file)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c d") 'cbilson/duplicate-start-of-line-or-region)
  (global-set-key (kbd "C-c f") 'find-file-in-project)
  (global-set-key (kbd "C-c g") 'magit-status)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c n") 'cbilson/cleanup-buffer)
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c C-k") 'compile)
  (global-set-key (kbd "C-c C-r") 'revert-buffer)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-M-h") 'backward-kill-word)
  (global-set-key (kbd "H-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "H-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "H-<up>") 'enlarge-window)
  (global-set-key (kbd "H-<down>") 'shrink-window)

#+end_src

* Major Modes
** General Programming Mode stuff
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'cbilson/kill-word-key)

(when (package-installed-p 'idle-highlight)
  (add-hook 'prog-mode-hook 'idle-highlight))

#+end_src
** C
#+begin_src emacs-lisp
(eval-after-load 'cc-mode
  '(progn
     (define-key c-mode-map (kbd "C-c C-k") 'compile)))
#+end_src
** C#

   In C# mode, I  want to have omnisharp available.

   #+begin_src emacs-lisp
     (when (package-installed-p 'csharp-mode)

       (c-add-style "Microsoft C#"
                    '("C#"
                      (c-basic-offset . 4)
                      (c-offsets-alist .
                                       ((arglist-intro . c-lineup-arglist-intro-after-paren)
                                        (arglist-cont . c-lineup-arglist)))))

       (defun cbilson/csharp-mode-hook ()
         (setq c-default-style "Microsoft C#"))

       (add-hook 'csharp-mode-hook 'cbilson/csharp-mode-hook)

       (when (package-installed-p 'omnisharp)
         (require 'omnisharp)
         (setq omnisharp--curl-executable-path
               (if (eq window-system 'w32)
                   (concat cbilson/chocolatey-bin-path "curl.exe")
                 "curl")
               omnisharp-eldoc-support t
               omnisharp-server-executable-path
               (concat cbilson/omnisharp-path "OmniSharp.exe"))

         ;; omnisharp-mode is really slow for big C# files, so turning off for now
         ;; (add-hook 'csharp-mode-hook 'omnisharp-mode)
         
         (global-set-key (kbd "C-c o j") 'omnisharp-start-omnisharp-server)
         (define-key omnisharp-mode-map (kbd "M-.") 'omnisharp-go-to-definition)
         (define-key omnisharp-mode-map (kbd "C-c C-k") 'omnisharp-build-in-emacs)
         (define-key omnisharp-mode-map (kbd "C-c o d") 'omnisharp-go-to-definition)
         (define-key omnisharp-mode-map (kbd "C-c o D") 'omnisharp-current-type-documentation)
         (define-key omnisharp-mode-map (kbd "C-c o f") 'omnisharp-mode)
         (define-key omnisharp-mode-map (kbd "C-c o i") 'omnisharp-find-implementations)
         (define-key omnisharp-mode-map (kbd "C-c o I") 'omnisharp-current-type-information)
         (define-key omnisharp-mode-map (kbd "C-c o r") 'omnisharp-rename)
         (define-key omnisharp-mode-map (kbd "C-c o u") 'omnisharp-find-usages)
         (define-key omnisharp-mode-map (kbd "C-c o RET") 'omnisharp-fix-code-issue-at-point)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ", n t") 'omnisharp-navigate-to-current-file-member)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ", n s") 'omnisharp-navigate-to-solution-member)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ", n f") 'omnisharp-navigate-to-solution-file-then-file-member)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ", n F") 'omnisharp-navigate-to-solution-file)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ", n r") 'omnisharp-navigate-to-region)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
         ;; (evil-define-key 'insert omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
         ;; (evil-define-key 'normal omnisharp-mode-map (kbd ",.") 'omnisharp-show-overloads-at-point)

         ))

   #+end_src

** clojure

*** Notes
    - What's boot?

*** Cider/Clojure Keybindings

   | Key       | Function                              |
   |-----------+---------------------------------------|
   | C-c C-d   | cider-doc-map                         |
   | M-.       | cider-jump-to-var                     |
   | M-,       | cider-jump-back                       |
   | C-c M-.   | cider-jump-to-resource                |
   | C-c TAB   | complete-symbol                       |
   | C-M-x     | cider-eval-defun-at-point             |
   | C-c C-c   | cider-eval-defun-at-point             |
   | C-x C-e   | cider-eval-last-sexp                  |
   | C-c C-e   | cider-eval-last-sexp                  |
   | C-c C-w   | cider-eval-last-sexp-and-replace      |
   | C-c M-e   | cider-eval-last-sexp-to-repl          |
   | C-c M-p   | cider-insert-last-sexp-in-repl        |
   | C-c C-p   | cider-pprint-eval-last-sexp           |
   | C-c C-f   | cider-pprint-eval-defun-at-point      |
   | C-c C-r   | cider-eval-region                     |
   | C-c C-n   | cider-eval-ns-form                    |
   | C-c M-:   | cider-read-and-eval                   |
   | C-c C-u   | cider-undef                           |
   | C-c C-m   | cider-macroexpand-1                   |
   | C-c M-m   | cider-macroexpand-all                 |
   | C-c M-n   | cider-repl-set-ns                     |
   | C-c M-i   | cider-inspect                         |
   | C-c M-t v | cider-toggle-trace-var                |
   | C-c M-t n | cider-toggle-trace-ns                 |
   | C-c C-z   | cider-switch-to-repl-buffer           |
   | C-c M-o   | cider-find-and-clear-repl-buffer      |
   | C-c C-k   | cider-load-buffer                     |
   | C-c C-l   | cider-load-file                       |
   | C-c C-b   | cider-interrupt                       |
   | C-c ,     | cider-test-run-tests                  |
   | C-c C-,   | cider-test-rerun-tests                |
   | C-c M-,   | cider-test-run-test                   |
   | C-c C-t   | cider-test-show-report                |
   | C-c M-s   | cider-selector                        |
   | C-c M-r   | cider-rotate-connection               |
   | C-c M-d   | cider-display-current-connection-info |
   | C-c C-x   | cider-refresh                         |

*** elisp

    #+begin_src emacs-lisp
      (when (package-installed-p 'cider)
        (global-set-key (kbd "C-c C-j") 'cider-jack-in)

        (eval-after-load 'cider
          '(progn
             (define-key cider-mode-map (kbd "C-c TAB") 'complete-symbol))))
    #+end_src

** compilation

   - [[http://stackoverflow.com/questions/17659212/dont-display-compilation-buffer-in-emacs-until-the-process-exits-with-error-o][Hiding compilation buffer]]
     - I got tired of this, since it hides other buffers like ag, and I
       usually end up *wanting* to see compilation buffers anyway.

   #+begin_src emacs-lisp
     ;; don't prompt for compilation command unless prefixed
     (setq compilation-read-command nil)

     ;; hide compilation buffer unless error
     (defadvice compilation-start
         (around inhibit-display
                 (command &optional mode name-function highlight-regexp))
       (if (not (string-match "^\\(find\\|grep\\)" command))
           (flet ((display-buffer)
              (set-window-point)
              (goto-char)) 
         (fset 'display-buffer 'ignore)
         (fset 'goto-char 'ignore)
         (fset 'set-window-point 'ignore)
         (save-window-excursion 
           ad-do-it))
         ad-do-it))

     ;;(ad-activate 'compilation-start)
     ;;(ad-deactivate 'compilation-start)
   #+end_src
** eshell
#+begin_src emacs-lisp
  (defun eshell/rgrep (&rest args)
    "Use Emacs grep facility instead of calling external grep."
    (eshell-grep "rgrep" args t))

  (defun eshell/cdg ()
    "Change directory to the project's root."
    (eshell/cd (locate-dominating-file default-directory ".git")))

  (global-set-key (kbd "C-c t") 'eshell)

#+end_src
** lisp modes

#+begin_src emacs-lisp
(setq lisp-modes
      '(lisp-mode emacs-lisp-mode common-lisp-mode scheme-mode clojure-mode))

(defvar lisp-mode-map (make-key-map))

(defun cbilson/lisp-mode-hook ()
  (smartparens-strict-mode t)
  (paren-face-mode))

(dolist (mode lisp-modes)
  (add-hook (intern (format "%s-hook" mode))
            #'cbilson/lisp-mode-hook))

(setq inferior-lisp-program "clisp")
(setq scheme-program-name "racket")

(add-hook 'cider-connected-hook 'cbilson/clojure-mode-eldoc-hook)

(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
(add-hook 'ielm-mode-hook 'elisp-slime-nav-mode)

(define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)

(define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
#+end_src

** LaTeX

#+begin_src emacs-lisp
(eval-after-load 'tex-mode
  '(progn
     (add-hook 'LaTeX-mode-hook
               (lambda ()
                 (setq TeX-auto-save t)
                 (setq TeX-parse-self t)
                 (reftex-mode t)
                 (TeX-fold-mode t)))))
#+end_src

** magit

   #+BEGIN_SRC emacs-lisp
   (setq magit-last-seen-setup-instructions "1.4.0")
   #+END_SRC

** org-mode

   - C-c C-j: org-goto
   - C-c r: org-refile
   - [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Learn how to take notes more efficiently in Org Mode]]
   - [[http://orgmode.org/worg/org-hacks.html][Org-Hacks]]
     
   #+CAPTION: Basic Org-Settings
   #+begin_src emacs-lisp
     (eval-after-load 'org
      '(progn
        (require 'ob)
        (require 'ob-clojure)

        (setq org-agenda-show-log t

              ;; log when something changes to done.
              org-log-done t)

        (define-skeleton skel-header-block
          "Creates my default header"
          "" "#+TITLE: " str "\n"
          "#+AUTHOR: Chris Bilson\n"
          "#+EMAIL: cbilson@pobox.com\n"
          "#+OPTIONS: toc:3 num:nil html-postamble:nil\n"
          "#+STYLE: <link rel=\"stylesheet\" type=\"text/css\" "
          "href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\""
          " />\n")

        (define-abbrev org-mode-abbrev-table "sheader" "" 'skel-header-block)

        (defun cbilson/org-mode-hook ()
          (abbrev-mode 1))

        (add-hook 'org-mode-hook 'flyspell-mode)
        (add-hook 'org-mode-hook 'cbilson/org-mode-hook)
        (add-hook 'org-mode-hook 'auto-fill-mode)))

   #+end_src

   #+CAPTION: Capture
   #+begin_src emacs-lisp
     (eval-after-load 'org
       '(progn

          (define-key org-mode-map (kbd "C-c C-j") 'org-goto)
          (define-key org-mode-map (kbd "C-c r") 'org-refile)

          (setq org-agenda-files (list cbilson/org-dir))

          (setq org-agenda-show-log t
                ;; org-archive-location "::* Archive"
                org-default-notes-file (concat cbilson/org-dir "Capture.org")
                org-refile-targets '((org-agenda-files . 3))
                org-todo-keywords
                '((sequence "BACKLOG" "TODO" "WIP" "BLOCKED" "|" "DONE" "DELEGATED"))
                ;;org-todo-keyword-faces
                ;;'(("WIP" . (:foreground "light-blue" :weight bold)))
                )

          (setq org-capture-templates
                '(("I" "Incident" entry
                   (file+datetree (concat cbilson/org-dir "Capture.org"))
                   "* RDIncident %?   :incident:\n  Entered on %U\n %i")
                  ("i" "Interesting" entry
                   (file+datetree (concat cbilson/org-dir "Capture.org"))
                   "* %?  :interesting:\n %i\n %a")
                  ("k" "Knowledge Base" entry
                   (file+datetree (concat cbilson/org-dir "Capture.org"))
                   "* KB %?   :kb:\n %i\n %a")
                  ("l" "Log" entry
                   (file+datetree (concat cbilson/org-dir "Capture.org"))
                   "* %?   :log:\n  Entered: %U\n %i\n %a")
                  ("m" "Meeting" entry
                   (file+datetree (concat cbilson/org-dir "Capture.org"))
                   "* Meeting %?   :meeting:\nEntered: %U\n %i\n %a")
                  ("t" "TODO" entry
                   (file+datetree (concat cbilson/org-dir "Work.org"))
                   "* BACKLOG %?\n  Entered: %U\n %i\n %a")))))

   #+end_src

   #+CAPTION: babel
   #+begin_src emacs-lisp
     (eval-after-load 'org
      '(progn
        (require 'ob)
        (require 'ob-clojure)

        (setq org-confirm-babel-evaluate nil
              org-ditaa-jar-path (concat cbilson/emacs-dir "vendor/ditaa0_9.jar")
              org-plantuml-jar-path (concat cbilson/emacs-dir "vendor/plantuml.jar")
              org-source-fontify-natively t)

        (add-hook 'org-babel-after-execute-hook
                  'cbilson/org-babel-after-execute-hook)

       (define-skeleton skel-org-block-elisp
          "Insert an emacs-lisp block"
          ""
          "#+begin_src emacs-lisp\n"
          _ - \n
          "#+end_src\n")

        (define-abbrev org-mode-abbrev-table "selisp" "" 'skel-org-block-elisp)

        (define-skeleton skel-org-block-powershell
          "Insert a powershell block"
          ""
          "#+begin_src powershell\n"
          _ - \n
          "#+end_src\n")

        (define-abbrev org-mode-abbrev-table "sposh" "" 'skel-org-block-powershell)

        (org-babel-do-load-languages
         'org-babel-load-languages
         '((clojure . t)
           (ditaa . t)
           (dot . t)
           (plantuml . t)
           (python . t)
           (ruby . t)
           (sh . t)))

        (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
        (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
        (add-to-list 'org-src-lang-modes (quote ("clojure" . "clj")))))

#+end_src

** xml-mode

For XML modes, I want emmet-mode active.

#+begin_src emacs-lisp
(eval-after-load 'nxml-mode
  '(progn
     (add-hook 'nxml-mode-hook 'emmet-mode)))
#+end_src

* Minor Modes
** ace-jump-mode
   
   #+begin_src emacs-lisp
   (when (package-installed-p 'ace-jump-mode)
     (require 'ace-jump-mode)
     (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
   #+end_src

** delete-selection-mode
   When Delete Selection mode is enabled, typed text replaces the selection
   if the selection is active.  Otherwise, typed text is just inserted at
   point regardless of any selection.

   #+begin_src emacs-lisp
   (delete-selection-mode +1)
   #+end_src

** easy-kill

#+begin_src emacs-lisp
  (require 'easy-kill)
  (global-set-key [remap kill-ring-save] 'easy-kill)
  (global-set-key [remap mark-sexp] 'easy-mark)

#+end_src

** ediff

   #+begin_src emacs-lisp
   (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src

** editorconfig

   EditorConfig helps developers define and maintain consistent coding
   styles between different editors and IDEs. The EditorConfig project
   consists of a file format for defining coding styles and a
   collection of text editor plugins that enable editors to read the
   file format and adhere to defined styles. EditorConfig files are
   easily readable and they work nicely with version control systems.

   Current Emacs plugin coverage for EditorConfig's properties:

   | Setting                               | Supported?              |
   |---------------------------------------+-------------------------|
   | indent_style                          |                         |
   | indent_size                           |                         |
   | tab_width                             |                         |
   | end_of_line                           |                         |
   | charset                               | not supported           |
   | trim_trailing_whitespace              |                         |
   | insert_final_newline                  | "=false" not supported+ |
   | max_line_length                       |                         |
   | root (only used by EditorConfig core) |                         |

    + (as in trailing newlines actually being removed automagically),
      we just buffer-locally override any preferences that would
      auto-add them to files .editorconfig marks as
      trailing-newline-free

    Not yet covered properties marked with over-strike – pull requests
    implementing missing features warmly welcomed! Typically, you will
    want to tie these to native functionality, or the configuration of
    existing packages handling the feature.

    You also need an executable to use editorconfig. On windows, I
    installed it with chocolatey, `choco install
    editorconfig.core'. This creates an exe under lib, and a batch file
    under %ChocolateyInstall%.

*** elisp
    #+begin_src emacs-lisp
      (when (package-installed-p 'editorconfig)
        (require 'editorconfig)

        (setq edconf-exec-path
              (let ((editorconfig (substitute-in-file-name
                                   "$ChocolateyInstall/bin/editorconfig")))
                (if (file-exists-p (concat editorconfig ".exe"))
                    (concat editorconfig ".exe")
                  (concat editorconfig ".bat"))))

        (add-to-list 'edconf-indentation-alist '(csharp-mode c-basic-offset)))
    #+end_src

*** Example .editorconfig

    #+BEGIN_QUOTE
    # EditorConfig is awesome: http://EditorConfig.org

    # top-most EditorConfig file
    root = true

    # Unix-style newlines with a newline ending every file
    [*]
    end_of_line = lf
    insert_final_newline = true

    # Matches multiple files with brace expansion notation
    # Set default charset
    [*.{js,py}]
    charset = utf-8

    # 4 space indentation
    [*.py]
    indent_style = space
    indent_size = 4

    # Tab indentation (no size specified)
    [*.js]
    indent_style = tab

    # Indentation override for all JS under lib directory
    [lib/**.js]
    indent_style = space
    indent_size = 2

    # Matches the exact files either package.json or .travis.yml
    [{package.json,.travis.yml}]
    indent_style = space
    indent_size = 2
    #+END_QUOTE

** expand-region

#+begin_src emacs-lisp
(when (package-installed-p 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

** flx

   Use the flx matching engine with ido. flx is the thing that enables
   matching like reshaper ("_A_thing_B_whatever" matched by "AB")
   along with even more powerful matching.

#+begin_src emacs-lisp
  (when (and (package-installed-p 'ido)
             (package-installed-p 'flx-ido))
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t
          ido-use-faces nil))
#+end_src

** helm

*** elisp

#+begin_src emacs-lisp
  (when (package-installed-p 'helm)
    (require 'helm-config)

    (setq helm-ff-file-name-history-use-recentf t
          helm-ff-search-library-in-sexp t
          helm-imenu-fuzzy-match t
          helm-M-x-fuzzy-match t
          helm-move-to-line-cycle-in-source t
          helm-scroll-amount 8
          helm-semantic-fuzzy-match t)

    (helm-autoresize-mode 1)

    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
    (global-set-key (kbd "C-c h o") 'helm-occur))

#+end_src

** ido
   I am stuck in-between ido-mode and helm

   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching t
           ido-everywhere t
           ido-use-filename-at-point 'guess
           ido-use-url-at-point nil)

     (ido-mode)
   #+end_src

** iedit
   
   | Key     | Binding                 |
   |---------+-------------------------|
   | C-c ;   | iedit-mode              |
   | C-c C-; | iedit-mode-from-isearch |

   #+begin_src emacs-lisp
     (when (package-installed-p 'iedit)
       (global-set-key (kbd "C-c ;") 'iedit-mode)
       (global-set-key (kbd "C-c C-;") 'iedit-mode-from-isearch))
   #+end_src
** loccur
   loccur lets you quickly see occurrences of a word in the current buffer.

   #+begin_src emacs-lisp
     (when (package-installed-p 'loccur)
       (require 'loccur)
       (global-set-key (kbd "C-o") 'loccur-current))
   #+end_src

** multiple-cursors

*** Keys

    | C-c m a | mc/edit-beginnings-of-lines    |
    | C-c m c | mc/add-curson-on-click         |
    | C-c m e | mc/edit-ends-of-lines          |
    | C-c m f | mc/mark-all-like-this-in-defun |
    | C-c m l | mc/edit-lines                  |
    | C-c m m | mc/mark-all-dwim               |

*** elisp

#+begin_src emacs-lisp
(when (package-installed-p 'multiple-cursors)
  (global-set-key (kbd "C-c m a") 'mc/edit-beginnings-of-lines)
  (global-set-key (kbd "C-c m c") 'mc/add-cursor-on-click)
  (global-set-key (kbd "C-c m e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-c m f") 'mc/mark-all-like-this-in-defun)
  (global-set-key (kbd "C-c m l") 'mc/edit-lines)
  (global-set-key (kbd "C-c m m") 'mc/mark-all-dwim))
#+end_src

** powershell

   This mode lets you run powershell as an inferior shell.

   #+begin_src emacs-lisp
     (setq powershell-eldoc-def-files
           nil)
   #+end_src

** powershell-mode

   - Allow file-local powershell indent.

     #+begin_src emacs-lisp
     (add-to-list 'safe-local-variable-values '(powershell-indent . 1))
     (setq powershell-indent 2)
     #+end_src

** projectile

   - If you're going to use the default ido completion it's extremely
     highly recommended that you install the optional flx-ido package,
     which provides a much more powerful alternative to ido's built-in
     flex matching.

*** Keys

    | Key       | Binding                                |
    |-----------+----------------------------------------|
    | C-c C-k   | projectile-compile-project             |
    | C-c p b   | projectile-switch-to-buffer            |
    | C-c p c   | projectile-compile-project             |
    | C-c p d   | projectile-find-dir                    |
    | C-c p D   | projectile-dired                       |
    | C-c p f   | projectile-find-file                   |
    | C-c p F   | projectile-find-file-in-known-projects |
    | C-c p i   | projectile-invalidate-cache            |
    | C-c p j   | projectile-find-tag                    |
    | C-c p k   | projectile-kill-buffers                |
    | C-c p o   | projectile-multi-occur                 |
    | C-c p r   | projectile-replace                     |
    | C-c p R   | projectile-regenerate-tags             |
    | C-c p s s | projectile-ag                          |

*** Code

#+begin_src emacs-lisp
  (when (package-installed-p 'projectile)
    (projectile-global-mode)
    (setq projectile-enable-caching t
          projectile-indexing-method 'native)

    (define-key projectile-mode-map (kbd "C-c C-k") 'projectile-compile-project))
#+end_src

** recentf
   `recentf' keeps track of recently visited files.
   - Show 15 matching items, but remember the last 200.

   #+begin_src emacs-lisp
   (require 'recentf)
   (recentf-mode +1)
   (setq recentf-max-menu-items 15
	 recentf-max-saved-items 200)
   #+end_src

** saveplace
   Remember where I was last time I visited a file.

   #+begin_src emacs-lisp
     (require 'saveplace)
     (setq-default save-place t
		   save-place-file (concat user-emacs-directory "places"))
   #+end_src

** smartparens

*** keys

    | C-M-f            | sp-forward-sexp                 |
    | C-M-b            | sp-backward-sexp                |
    | C-M-d            | sp-down-sexp                    |
    | C-M-a            | sp-backward-down-sexp           |
    | C-S-a            | sp-beginning-of-sexp            |
    | C-S-d            | sp-end-of-sexp                  |
    | C-M-e            | sp-up-sexp                      |
    | C-M-u            | sp-backward-up-sexp             |
    | C-M-t            | sp-transpose-sexp               |
    | C-M-n            | sp-next-sexp                    |
    | C-M-p            | sp-previous-sexp                |
    | C-M-k            | sp-kill-sexp                    |
    | C-M-w            | sp-copy-sexp                    |
    | M-<delete>       | sp-unwrap-sexp                  |
    | M-<backspace>    | sp-backward-unwrap-sexp         |
    | C-<right>        | sp-forward-slurp-sexp           |
    | C-<left>         | sp-forward-barf-sexp            |
    | C-M-<right>      | sp-backward-barf-sexp           |
    | C-M-<left>       | sp-backward-slurp-sexp          |
    | M-D              | sp-splice-sexp                  |
    | C-M-<delete>     | sp-splice-sexp-killing-forward  |
    | C-M-<backspace>  | sp-splice-sexp-killing-backward |
    | C-S-<backspace>  | sp-splice-sexp-killing-around   |
    | C-]              | sp-select-next-thinge-exchange  |
    | C-<left_bracket> | sp-select-previous-thing        |
    | C-M-]            | sp-select-next-thing            |
    | M-F              | sp-forward-symbol               |

*** elisp

#+begin_src emacs-lisp
  (eval-after-load 'smartparens
    '(progn
       (smartparens-global-mode +1)
       (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
       (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

       (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
       (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
       (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
       (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

       (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
       (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
       (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
       (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

       (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
       (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

       (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
       (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

       (define-key sp-keymap (kbd "M-<delete>") 'sp-unwrap-sexp)
       (define-key sp-keymap (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

       (define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
       (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
       (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
       (define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)

       (define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
       (define-key sp-keymap (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
       (define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
       (define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

       (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
       (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
       (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)

       (define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)))

  ;; If it's installed, require it to get it loaded
  (when (package-installed-p 'smartparens)
    (require 'smartparens-config)
    (show-smartparens-global-mode +1))
#+end_src

** smooth-scrolling

   #+begin_src emacs-lisp
   ;;(when (package-installed-p 'smooth-scrolling)
   ;;  (require 'smooth-scrolling))
   #+end_src

** transient-mark-mode

   Transient Mark mode is a global minor mode.  When enabled, the
   region is highlighted whenever the mark is active.  The mark is
   "deactivated" by changing the buffer, and after certain other
   operations that set the mark but whose main purpose is something
   else--for example, incremental search, <, and >.

   You can also deactivate the mark by typing C-g or M-ESC ESC.

   Many commands change their behavior when Transient Mark mode is
   in effect and the mark is active, by acting on the region instead
   of their usual default part of the buffer's text.  Examples of
   such commands include M-;, M-x flush-lines, M-x keep-lines, M-%,
   C-M-%, M-x ispell, and <undo>.

   To see the documentation of commands which are sensitive to the
   Transient Mark mode, invoke C-h d and type "transient" or
   "mark.*active" at the prompt.

   #+begin_src emacs-lisp
   (transient-mark-mode +1)
   #+end_src

** undo-tree

#+begin_src emacs-lisp
(when (package-installed-p 'undo-tree)
  (undo-tree-mode +1)

  ;; these are just the standard undo-tree keys, but I keep them here
  ;; for reference
  (global-set-key (kbd "C-_") 'undo-tree-undo)
  (global-set-key (kbd "M-_") 'undo-tree-redo)
  (global-set-key (kbd "C-x u") 'undo-tree-visualize))
#+end_src

** winner-mode

   Winner mode is a global minor mode that records the changes in the
   window configuration (i.e., how the frames are partitioned into
   windows), so that you can "undo" them.  You can toggle Winner mode
   with `M-x winner-mode', or by customizing the variable `winner-mode'.
   When the mode is enabled, `C-c left' (`winner-undo') undoes the last
   window configuration change.  If you change your mind while undoing,
   you can redo the changes you had undone using `C-c right' (`M-x
   winner-redo').

*** Keys

    | C-c <left>  | winner-undo |
    | C-c <right> | winner-redo |

*** elisp

#+begin_src emacs-lisp
    (winner-mode +1)
#+end_src

** yasnippet

#+begin_src emacs-lisp
  (require 'yasnippet)
  (setq yas-snippet-dirs
        (file-name-as-directory
         (concat cbilson/emacs-dir "snippets")))

  (yas-global-mode +1)
#+end_src
** uniquify
   The library uniquify overrides Emacs’ default mechanism for
   making buffer names unique (using suffixes like <2>, <3> etc.)
   with a more sensible behaviour which use parts of the file names
   to make the buffer names distinguishable.

   For instance, buffers visiting "/u/mernst/tmp/Makefile" and
   "/usr/projects/zaphod/Makefile" would be named "Makefile|tmp" and
   "Makefile|zaphod", respectively (instead of "Makefile" and
   "Makefile<2>"). Other buffer name styles are also available. To
   enable this, (require 'uniquify) then customize
   uniquify-buffer-name-style. (Run M-x customize-option)

   #+begin_src emacs-lisp
     (require 'uniquify)

     (setq uniquify-buffer-name-style 'forward)
   #+end_src

** writegood
   
   Highlights bad grammar and writing anti-patterns

   #+begin_src emacs-lisp
     (when (package-installed-p 'writegood-mode)
       (require 'writegood-mode)

       (set-face-attribute 'writegood-passive-voice-face nil :background "gray22")
       (set-face-attribute 'writegood-duplicates-face nil :background "gray22")

       (add-hook 'org-mode-hook 'writegood-mode)
       (add-hook 'markdown-mode-hook 'writegood-mode)
       (add-hook 'latex-mode-hook 'writegood-mode))

   #+end_src
